# -*- coding: utf-8 -*-
"""PyTorch Basics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mQyiGFA-5kxXuQUPRCW_WQSblgOGiUYe

# PyTorch Basics
"""

!pip install torch

import torch

"""# Tensors"""

# Number
t1 = torch.tensor(4.)
t1, t1.dtype

# Vector
t2 = torch.tensor([1,2,3,4])
t2, t2.dtype

# Matrix
x = [
     [1,2,3],
     [4,5,6], 
     [7,8,9]
     ]
t3 = torch.tensor(x)
x, t3, t3.dtype

t1.shape, t2.shape, t3.shape

"""# Tensor Operations and Gradients"""

# Create Tensors
x = torch.tensor(3.)
w = torch.tensor(4., requires_grad=True)
b = torch.tensor(5., requires_grad=True)
x, w, b

# Arithmetic Operations
y = w * x + b
y

"""We can automatically compute the derivative of `y` w.r.t. the tensors that have `requires_grad` set to `True` i.e. w and b. To compute the derivatives, we can call the `.backward` method on our result `y`."""

# Compute Derivatives
y.backward()

"""The derivates of `y` w.r.t the input tensors are stored in the `.grad` property of the respective tensors."""

# Display Gradients
print('dy/dx:', x.grad)
print('dy/dw:', w.grad)
print('dy/db:', b.grad)

"""The "grad" in `w.grad` stands for gradient, which is another term for derivative, used mainly when dealing with matrices.

## Interoperability with Numpy

[Numpy](http://www.numpy.org/) is a popular open source library used for mathematical and scientific computing in Python. It enables efficient operations on large multi-dimensional arrays, and has a large ecosystem of supporting libraries:

* [Matplotlib](https://matplotlib.org/) for plotting and visualization
* [OpenCV](https://opencv.org/) for image and video processing
* [Pandas](https://pandas.pydata.org/) for file I/O and data analysis

Instead of reinventing the wheel, PyTorch interoperates really well with Numpy to leverage its existing ecosystem of tools and libraries.

Here's how we create an array in Numpy:
"""

import numpy as np

x = np.array([[1, 2], [3, 4.]])
x

"""We can convert a Numpy array to a PyTorch tensor using `torch.from_numpy`."""

# Convert the numpy array to a torch tensor.
y = torch.from_numpy(x)
y

"""Let's verify that the numpy array and torch tensor have similar data types."""

x.dtype, y.dtype

"""We can convert a PyTorch tensor to a Numpy array using the `.numpy` method of a tensor."""

# Convert a torch tensor to a numpy array
z = y.numpy()
z

"""The interoperability between PyTorch and Numpy is really important because most datasets you'll work with will likely be read and preprocessed as Numpy arrays."""

